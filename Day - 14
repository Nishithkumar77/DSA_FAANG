Question : - Median of two sorted array

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Solution 1: - 
By using inbuilt function we can find this

from statistics import median
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums1.extend(nums2)
        return median(nums1)

Solution 2: - 

class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        merged_array = [0] * (len(nums1) + len(nums2))
        idx_nums1 = 0  # Index for nums1
        idx_nums2 = 0  # Index for nums2

        # Merge the arrays while maintaining the sorted order
        for i in range(len(merged_array)):
            if idx_nums2 < len(nums2) and (idx_nums1 == len(nums1) or nums2[idx_nums2] < nums1[idx_nums1]):
                merged_array[i] = nums2[idx_nums2]
                idx_nums2 += 1
            else:
                merged_array[i] = nums1[idx_nums1]
                idx_nums1 += 1

        # Calculate the median of the merged array
        if len(merged_array) % 2 == 1:
            return merged_array[len(merged_array) // 2]
        else:
            return (merged_array[len(merged_array) // 2] + merged_array[len(merged_array) // 2 - 1]) / 2.0
